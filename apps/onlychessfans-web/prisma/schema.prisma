// Local

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sql"
}

// model Todo {
//   id String @id @default(cuid())
//   @@map("todos")
// }

// schema.prisma

// Prod

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Post {
  id             String @id @default(cuid())
  type           String // PGN | FEN
  content        String
  // published Boolean @default(false)
  author         User   @relation(fields: [authorUsername], references: [username])
  authorUsername String
  likedBy        User[] @relation("likes")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  // PostLikes      PostLikes[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  posts     Post[]
  liked     Post[]   @relation("likes")
  // PostLikes PostLikes[]

  @@map(name: "users")
}

// model PostLikes {
//   post       Post     @relation(fields: [postId], references: [id])
//   postId     String // relation scalar field (used in the `@relation` attribute above)
//   user       User     @relation(fields: [byUsername], references: [username])
//   byUsername String // relation scalar field (used in the `@relation` attribute above)
//   createdAt  DateTime @default(now())

//   @@id([postId, byUsername])
// }
